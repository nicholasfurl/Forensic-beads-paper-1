install.packages(c('tidytuesdayR', 'tidyverse'))
library(tidytuesdayR)
library(tidyverse)
tuesdata <- tidytuesdayR::tt_load('2022-11-29')
tuesdata <- tidytuesdayR::tt_load(2022, week = 48)
class(tuesdata)
type(tuesdata)
typeof(tuesdata)
tuesdata[1]
tuesdata[[1]
]
typeof(tuesdata[[1]])
typeof(tuesdata[1])
test = tuesdata[[1]]
test
typeof(test)
tuesdata
worldcups  <- tuesdata$worldcups
wcmatches  <- tuesdata$wcmatches
View(worldcups)
View(worldcups)
# Or read in the data manually
wcmatches <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/wcmatches.csv')
worldcups <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv')
mydata   <- wcmatches
names(mydata)
names(mydata)[1]
names(mydata)[1] = "year"
names(mydata)
names(mydata)[1] = "Year"
names(mydata)
mydata$home_score
summary(mydata$home_score)
sd(mydata$home_score)
length(mydata$home_score)
table(mydata$home_score)
table(mydata$home_score, mydata$away_score)
cor(mydata$home_score, mydata$away_score)
t.test(mydata$home_score, mydata$away_score)
cor(mydata$home_score, mydata$away_score,method = 'spearman')
cor.test(mydata$home_score, mydata$away_score,method = 'spearman')
cor.test(mydata$home_score, mydata$away_score)
# T-test for mean of home vs away
t.test(mydata$home_score, mydata$away_score)
mydata %>%
select(home_score) %>%
summary()
mydata %>%
filter(country == 'Zimbabwe')
select(home_score) %>%
summary()
## This is a pipe. It allows the chaining of functions:
mydata %>%
filter(country == 'Zimbabwe') %>%
select(home_score) %>%
summary()
mydata %>%
filter(country == 'Spain') %>%
select(home_score) %>%
summary()
mydata %>%
filter(country == 'Zimbabwe') %>%
select(home_score) %>%
na.omit() %>%
summary()
?mutate
help(mutate)
# ANOVA for days of the week
newdata <- mydata %>%
mutate(TotalGoals = home_score + away_score)
aov(TotalGoals ~ dayofweek, data = newdata)
summary(aov(TotalGoals ~ dayofweek, data = newdata))
help(aov)
# OLS regression
newdata2 <- mydata %>%
pivot_longer(home_score:away_score, names_to = 'Location', values_to = 'Score')
newdata2
olsreg <- lm(Score ~ Location + dayofweek, newdata2)
summary(olsreg)
olsreg
prob_g <- function(g, n, q=0.7, prior=0.5){
prior / (prior + (1-prior)*(q/(1-q))ˆ(n-2*g))
prob_g <- function(g, n, q=0.7, prior=0.5){
prior / (prior + (1-prior)*(q/(1-q))ˆ(n-2*g))
prob_g <- function(g, n, q=0.7, prior=0.5){
prior / (prior + (1-prior)*(q/(1-q))^(n-2*g))
}
# simulate 10 draws with split 0.7
set.seed(123)
q <- 0.7
n_draws <- 20
draws_g <- rbinom(n_draws, 1, prob=q)
# compute the probability
estimated_prob_g <- rep(NA, n_draws)
for(i in 1:n_draws){
estimated_prob_g[i] <- prob_g(g=sum(draws_g[1:i]),
n=i,
q=0.7,
prior=0.5)
}
estimated_prob_g
prob_g_delta <- function(draws, alpha = 0.1, beta=1, prior=0.5){
q_hat <- prior
q_hat_list <- numeric(length(draws))
q_hat_list[1] <- q_hat
prob_g_list <- numeric(length(draws))
for (t in 1:length(draws)) {
q_hat <- q_hat + alpha * (draws[t] - q_hat)
q_hat_list[t] <- q_hat
prob_g_list[t] <- exp(beta*q_hat)/(exp(beta*q_hat) + exp(beta*(1-q_hat)))
}
return(list(q=q_hat_list, g=prob_g_list))
}
alternative_prob_g <- prob_g_delta(draws_g[1:i], alpha = 0.1, beta=12, prior=0.5)
i
alternative_prob_g
# plot
plot(1:n_draws, draws_g, xlab="draw", ylab="p(G)", pch=19)
lines(1:n_draws, estimated_prob_g, col="blue")
lines(1:n_draws,alternative_prob_g$g, col="red")
legend(x=14,y=0.4,legend=c("optimal","delta rule"),lwd=1, col=c("blue","red"), bty="n")
alternative_prob_g <- prob_g_delta(draws_g[1:i], alpha = 1, beta=1, prior=0.5)
# plot
plot(1:n_draws, draws_g, xlab="draw", ylab="p(G)", pch=19)
lines(1:n_draws, estimated_prob_g, col="blue")
lines(1:n_draws,alternative_prob_g$g, col="red")
legend(x=14,y=0.4,legend=c("optimal","delta rule"),lwd=1, col=c("blue","red"), bty="n")
alternative_prob_g <- prob_g_delta(draws_g[1:i], alpha = .1, beta=1, prior=0.5)
# plot
plot(1:n_draws, draws_g, xlab="draw", ylab="p(G)", pch=19)
lines(1:n_draws, estimated_prob_g, col="blue")
lines(1:n_draws,alternative_prob_g$g, col="red")
legend(x=14,y=0.4,legend=c("optimal","delta rule"),lwd=1, col=c("blue","red"), bty="n")
alternative_prob_g <- prob_g_delta(draws_g[1:i], alpha = 0, beta=1, prior=0.5)
# plot
plot(1:n_draws, draws_g, xlab="draw", ylab="p(G)", pch=19)
lines(1:n_draws, estimated_prob_g, col="blue")
lines(1:n_draws,alternative_prob_g$g, col="red")
legend(x=14,y=0.4,legend=c("optimal","delta rule"),lwd=1, col=c("blue","red"), bty="n")
alternative_prob_g <- prob_g_delta(draws_g[1:i], alpha = 0.5, beta=1, prior=0.5)
# plot
plot(1:n_draws, draws_g, xlab="draw", ylab="p(G)", pch=19)
lines(1:n_draws, estimated_prob_g, col="blue")
lines(1:n_draws,alternative_prob_g$g, col="red")
legend(x=14,y=0.4,legend=c("optimal","delta rule"),lwd=1, col=c("blue","red"), bty="n")
draws_g
draws_g[1:i]
#
rm(list=ls())
#
rm(list=ls())
setwd("/home/matteo/Dropbox/sync/RHUL/stats_role/Nick")
#
rm(list=ls())
setwd("C:\matlab_files\fiance\forensic_beads_pub_repo\Forensic-beads-paper-1\Study1")
setwd('C:\matlab_files\fiance\forensic_beads_pub_repo\Forensic-beads-paper-1\Study1')
#
rm(list=ls())
setwd('C:/matlab_files/fiance/forensic_beads_pub_repo/Forensic-beads-paper-1/Study1')
library(tidyverse)
# load data
d <- read_csv("forensic_beads_study1_data.csv")
# select 1 participant
d_i <- d[1:11 + 11,]
data.frame(d_i)
# prepare data for stan
d_stan <- list(
prob_rating = d_i$HumanProbability / 100,
claim = d_i$Claim,
q = 0.6
)
# load stan
library(rstan)
options(mc.cores = parallel::detectCores())
# run MCMC sampling
stan_fit <- stan(file="beads_single.stan", data=d_stan, iter=8000, control=list(adapt_delta=0.9))
#
rm(list=ls())
setwd('C:/matlab_files/fiance/forensic_beads_pub_repo/Forensic-beads-paper-1/Study1')
library(tidyverse)
# load data
d <- read_csv("forensic_beads_study1_data.csv")
# select 1 participant
d_i <- d[1:11 + 11,]
data.frame(d_i)
# prepare data for stan
d_stan <- list(
prob_rating = d_i$HumanProbability / 100,
claim = d_i$Claim,
q = 0.6
)
# load stan
library(rstan)
options(mc.cores = parallel::detectCores())
# run MCMC sampling
stan_fit <- stan(file="beads_single.stan", data=d_stan, iter=8000, control=list(adapt_delta=0.9))
remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
install.packages("rstan", repos = c("https://stan-dev.r-universe.dev", getOption("repos")))
remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
example(stan_model, package = "rstan", run.dontrun = TRUE)
